// 部分和問題
// N個の正の整数{a0,a1,a2,a3,...,a(N-1)}の中から整数を選んで、総和を正の整数Wにすることは可能か？
// 与えられたN個の集合の冪集合2^N通り全て調べれば、答えが出る。
// ここで、たとえばN=3 {a0,a1,a2}の時、冪集合の要素を2進法で表現してみる。
//  {a0} = 001, {a1} = 010, {a0,a1} = 011 ...
// このように、N個の要素からなる集合の冪集合のすべての要素は、N桁以下の2進数で表現することができる。
// 以下のプログラムでは、この2進法表現を、0~2^Nの10進法整数値に対応づけている。

// 計算量はO(N*2^N) 指数時間

#include <iostream>
#include <vector>
using namespace std;

int main() {
    // 入力受け取り
    int N, W;
    cin >> N >> W;
    vector<int> a(N);
    for (int i = 0; i < N; ++i) cin >> a[i];

    // bitは2^N通りの部分集合全体を動く
    // 1 << Nは2^Nを表している
    bool exist = false;
    for (int bit = 0; bit < (1 << N); ++bit) {
        int sum = 0;  // ある部分集合に含まれる要素の和
        // 部分集合のうちのある1パターン(011とか)について、
        for (int i = 0; i < N; ++i) {
            // i番目の要素 a[i] がその部分集合に含まれているかどうか
            // たとえば、a1は部分集合の表現011に含まれている(一番下の桁が1なので)
            if (bit & (1 << i)) {
                sum += a[i];
            }
        }
        // sumがWに合致するかどうか
        if (sum == W) exist = true;
        // 次の部分集合に進む
    }

    if (exist)
        cout << "Yes" << endl;
    else
        cout << "No" << endl;
}
